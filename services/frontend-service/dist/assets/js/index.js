"use strict";

let spinner = document.getElementById("spinner");
let exampleImage = document.getElementById("exampleImage");
let fileInput = document.getElementById("file-upload");
let numberInput = document.getElementById("numberHats");
let typeInput = document.getElementById("typeInput");
let numberHats = document.getElementById("numberHats");

function getImage(event) {
  event.preventDefault(); // let baseUrl = "https://api.tinyhat.me/";

  var formData = new FormData();
  let baseUrl = "/api/hat";
  let method = "GET";
  let options = {}; // show spinner and hide the person

  spinner.classList.remove("hidden");
  exampleImage.classList.add('hidden');

  if (typeInput) {
    formData.append("type", typeInput.value);
    console.log(typeInput.value);
    options = {
      method,
      headers: {
        type: typeInput.value
      }
    };
  }

  if (numberHats.value != "") {
    baseUrl += `?number=${numberHats.value}`;
  }

  if (fileInput.files.length > 0) {
    console.log("file has been added");
    method = "POST";
    console.log(fileInput.files[0]);
    formData.append("file", fileInput.files[0]);
    options["body"] = formData;
    options["method"] = method;
  }

  console.log("Making fetch");
  console.log(baseUrl);
  console.log(options);
  fetch(baseUrl, options).then(resp => resp.json()).then(data => {
    console.log(data);
    exampleImage.src = data.result.finalBaby;
    console.log(exampleImage);
    exampleImage.classList.remove("hidden");
    spinner.classList.add("hidden");
  });
}

window.onload = async function getHats(event) {
  event.preventDefault();
  console.log("Getting hats");
  let baseUrl = "/api/list"; // get description and image links

  let hats = await fetch(baseUrl, {
    method: "GET"
  });
  console.log(hats);
  let hatList = await hats.json();
  console.log(hatList);
  let wrapper = document.querySelector(".swiper-wrapper"); // loop through to populate options and image

  var temp = [];
  hatList_mod = hatList.filter(item => {
    if (!temp.includes(item.description)) {
      temp.push(item.description);
      return true;
    }
  });

  for (var i = 0; i < hatList_mod.length; i++) {
    $('#HATSelect').find('select[id="typeInput"]').append($('<option/>', {
      value: hatList_mod[i].description,
      text: hatList_mod[i].description
    }));
  }

  for (var i = 0; i < hatList.length; i++) {
    $('.swiper-wrapper').append(`<div class="swiper-slide d-flex align-items-center justify-content-center"><img class="img-fluid swiper-pic" width="100px" src="${hatList[i].url}" alt=""></div>`);
  }

  const swiper = new Swiper('.swiper-container', {
    // Optional parameters
    direction: 'horizontal',
    slidesPerView: 4,
    slidesPerColumn: 3,
    slidesPerColumnFill: 'row',
    spaceBetween: 10,
    speed: 1000,
    breakpoints: {
      // when window width is >= 320px
      576: {
        slidesPerView: 2,
        spaceBetween: 20
      },
      // when window width is >= 480px
      768: {
        slidesPerView: 3,
        spaceBetween: 20
      },
      // when window width is >= 640px
      992: {
        slidesPerView: 6,
        spaceBetween: 20
      },
      1200: {
        slidesPerView: 8,
        spaceBetween: 20
      }
    }
  }); // set the number of hats there are

  document.getElementById("numHats").innerHTML = hatList.length + " hats.";
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Fzc2V0cy9qcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJzcGlubmVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImV4YW1wbGVJbWFnZSIsImZpbGVJbnB1dCIsIm51bWJlcklucHV0IiwidHlwZUlucHV0IiwibnVtYmVySGF0cyIsImdldEltYWdlIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJiYXNlVXJsIiwibWV0aG9kIiwib3B0aW9ucyIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsImFwcGVuZCIsInZhbHVlIiwiY29uc29sZSIsImxvZyIsImhlYWRlcnMiLCJ0eXBlIiwiZmlsZXMiLCJsZW5ndGgiLCJmZXRjaCIsInRoZW4iLCJyZXNwIiwianNvbiIsImRhdGEiLCJzcmMiLCJyZXN1bHQiLCJmaW5hbEJhYnkiLCJ3aW5kb3ciLCJvbmxvYWQiLCJnZXRIYXRzIiwiaGF0cyIsImhhdExpc3QiLCJ3cmFwcGVyIiwicXVlcnlTZWxlY3RvciIsInRlbXAiLCJoYXRMaXN0X21vZCIsImZpbHRlciIsIml0ZW0iLCJpbmNsdWRlcyIsImRlc2NyaXB0aW9uIiwicHVzaCIsImkiLCIkIiwiZmluZCIsInRleHQiLCJ1cmwiLCJzd2lwZXIiLCJTd2lwZXIiLCJkaXJlY3Rpb24iLCJzbGlkZXNQZXJWaWV3Iiwic2xpZGVzUGVyQ29sdW1uIiwic2xpZGVzUGVyQ29sdW1uRmlsbCIsInNwYWNlQmV0d2VlbiIsInNwZWVkIiwiYnJlYWtwb2ludHMiLCJpbm5lckhUTUwiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsT0FBTyxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsU0FBeEIsQ0FBZDtBQUNBLElBQUlDLFlBQVksR0FBR0YsUUFBUSxDQUFDQyxjQUFULENBQXdCLGNBQXhCLENBQW5CO0FBRUEsSUFBSUUsU0FBUyxHQUFHSCxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsYUFBeEIsQ0FBaEI7QUFD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QUNILENBcEVEIiwic291cmNlc0NvbnRlbnQiOlsibGV0IHNwaW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXJcIik7XG5sZXQgZXhhbXBsZUltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJleGFtcGxlSW1hZ2VcIik7XG5cbmxldCBmaWxlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpbGUtdXBsb2FkXCIpO1xubGV0IG51bWJlcklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJudW1iZXJIYXRzXCIpO1xubGV0IHR5cGVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHlwZUlucHV0XCIpO1xubGV0IG51bWJlckhhdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm51bWJlckhhdHNcIilcblxuZnVuY3Rpb24gZ2V0SW1hZ2UoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgLy8gbGV0IGJhc2VVcmwgPSBcImh0dHBzOi8vYXBpLnRpbnloYXQubWUvXCI7XG4gICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgbGV0IGJhc2VVcmwgPSBcIi9hcGkvaGF0XCI7XG5cbiAgICBsZXQgbWV0aG9kID0gXCJHRVRcIjtcbiAgICBsZXQgb3B0aW9ucyA9IHt9XG4gICAgLy8gc2hvdyBzcGlubmVyIGFuZCBoaWRlIHRoZSBwZXJzb25cbiAgICBzcGlubmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gICAgZXhhbXBsZUltYWdlLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuXG5cbiAgICBpZiAodHlwZUlucHV0KSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChcInR5cGVcIiwgdHlwZUlucHV0LnZhbHVlKTtcbiAgICAgICAgY29uc29sZS5sb2codHlwZUlucHV0LnZhbHVlKTtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlSW5wdXQudmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChudW1iZXJIYXRzLnZhbHVlICE9IFwiXCIpIHtcbiAgICAgICAgYmFzZVVybCArPSBgP251bWJlcj0ke251bWJlckhhdHMudmFsdWV9YFxuICAgIH1cblxuICAgIGlmIChmaWxlSW5wdXQuZmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImZpbGUgaGFzIGJlZW4gYWRkZWRcIilcbiAgICAgICAgbWV0aG9kID0gXCJQT1NUXCJcblxuXG4gICAgICAgIGNvbnNvbGUubG9nKGZpbGVJbnB1dC5maWxlc1swXSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChcImZpbGVcIiwgZmlsZUlucHV0LmZpbGVzWzBdKTtcblxuICAgICAgICBvcHRpb25zW1wiYm9keVwiXSA9IGZvcm1EYXRhO1xuICAgICAgICBvcHRpb25zW1wibWV0aG9kXCJdID0gbWV0aG9kO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFwiTWFraW5nIGZldGNoXCIpXG4gICAgY29uc29sZS5sb2coYmFzZVVybClcbiAgICBjb25zb2xlLmxvZyhvcHRpb25zKVxuICAgIGZldGNoKGJhc2VVcmwsIG9wdGlvbnMpXG4gICAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC5qc29uKCkpXG4gICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSlcbiAgICAgICAgICAgIGV4YW1wbGVJbWFnZS5zcmMgPSBkYXRhLnJlc3VsdC5maW5hbEJhYnlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV4YW1wbGVJbWFnZSlcbiAgICAgICAgICAgIGV4YW1wbGVJbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpXG4gICAgICAgICAgICBzcGlubmVyLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIilcbiAgICAgICAgfSlcblxufVxuXG53aW5kb3cub25sb2FkID0gYXN5bmMgZnVuY3Rpb24gZ2V0SGF0cyhldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zb2xlLmxvZyhcIkdldHRpbmcgaGF0c1wiKVxuICAgIGxldCBiYXNlVXJsID0gXCIvYXBpL2xpc3RcIjtcblxuICAgIC8vIGdldCBkZXNjcmlwdGlvbiBhbmQgaW1hZ2UgbGlua3NcbiAgICBsZXQgaGF0cyA9IGF3YWl0IGZldGNoKGJhc2VVcmwsIHtcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiXG4gICAgfSlcbiAgICBjb25zb2xlLmxvZyhoYXRzKVxuICAgIGxldCBoYXRMaXN0ID0gYXdhaXQgaGF0cy5qc29uKClcbiAgICBjb25zb2xlLmxvZyhoYXRMaXN0KVxuICAgIGxldCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItd3JhcHBlclwiKTtcbiAgICAvLyBsb29wIHRocm91Z2ggdG8gcG9wdWxhdGUgb3B0aW9ucyBhbmQgaW1hZ2VcblxuICAgIHZhciB0ZW1wID0gW11cbiAgICBoYXRMaXN0X21vZCA9IGhhdExpc3QuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICAgIGlmICghdGVtcC5pbmNsdWRlcyhpdGVtLmRlc2NyaXB0aW9uKSkge1xuICAgICAgICAgICAgdGVtcC5wdXNoKGl0ZW0uZGVzY3JpcHRpb24pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhdExpc3RfbW9kLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICQoJyNIQVRTZWxlY3QnKS5maW5kKCdzZWxlY3RbaWQ9XCJ0eXBlSW5wdXRcIl0nKS5hcHBlbmQoJCgnPG9wdGlvbi8+Jywge1xuICAgICAgICAgICAgdmFsdWU6IGhhdExpc3RfbW9kW2ldLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdGV4dDogaGF0TGlzdF9tb2RbaV0uZGVzY3JpcHRpb24sXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhdExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgJCgnLnN3aXBlci13cmFwcGVyJykuYXBwZW5kKGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWNlbnRlclwiPjxpbWcgY2xhc3M9XCJpbWctZmx1aWQgc3dpcGVyLXBpY1wiIHdpZHRoPVwiMTAwcHhcIiBzcmM9XCIke2hhdExpc3RbaV0udXJsfVwiIGFsdD1cIlwiPjwvZGl2PmApXG4gICAgfVxuXG4gICAgY29uc3Qgc3dpcGVyID0gbmV3IFN3aXBlcignLnN3aXBlci1jb250YWluZXInLCB7XG4gICAgICAgIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDQsXG4gICAgICAgIHNsaWRlc1BlckNvbHVtbjogMyxcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uRmlsbDogJ3JvdycsXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMTAsXG4gICAgICAgIHNwZWVkOiAxMDAwLFxuICAgICAgICBicmVha3BvaW50czoge1xuICAgICAgICAgICAgLy8gd2hlbiB3aW5kb3cgd2lkdGggaXMgPj0gMzIwcHhcbiAgICAgICAgICAgIDU3Njoge1xuICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDIsXG4gICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAyMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHdoZW4gd2luZG93IHdpZHRoIGlzID49IDQ4MHB4XG4gICAgICAgICAgICA3Njg6IHtcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAzLFxuICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB3aGVuIHdpbmRvdyB3aWR0aCBpcyA+PSA2NDBweFxuICAgICAgICAgICAgOTkyOiB7XG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogNixcbiAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDIwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgMTIwMDoge1xuICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDgsXG4gICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAyMFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBzZXQgdGhlIG51bWJlciBvZiBoYXRzIHRoZXJlIGFyZVxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibnVtSGF0c1wiKS5pbm5lckhUTUwgPSBoYXRMaXN0Lmxlbmd0aCArIFwiIGhhdHMuXCJcbn1cbiJdfQ==