"use strict";

var _express = require("express");

var _expressAsyncErrors = require("express-async-errors");

var _multer = require("multer");

var _helpers = require("./src/helpers.js");

var _winston = require("winston");

var _winstonEnricher = require("@newrelic/winston-enricher");

require('newrelic');

const upload = _multer();

const app = _express();

var router = _express.Router();

const PORT = 8080;

const logger = _winston.createLogger({
  level: 'info',
  transports: [new _winston.transports.Console()],
  format: _winston.format.combine(_winston.format((info, opts) => Object.assign(info, {
    module: __filename
  }))(), _winstonEnricher(), _winston.format.errors({
    stack: true
  }), _winston.format.json())
}); // for testing locally: node -r dotenv/config index.js  
// https://stackoverflow.com/questions/28305120/differences-between-express-router-and-app-get


app.use('/', router);
app.listen(PORT, () => {
  logger.info(`Upload Service started on port ${PORT}`);
});
router.post('/upload', upload.any(), async (req, res) => {
  logger.info("Starting upload");
  let image = req.files[0].buffer;
  let name = req.body.name.toLowerCase();
  let fileName = (0, _helpers.uniqueId)(); // parse from body

  logger.info(fileName, name, image); // determine file extension

  let ext = (0, _helpers.fileExt)(req.body.mimeType); // base64 image to binary data

  let imageData = Buffer.from(image, 'base64'); // upload to s3

  let link = await (0, _helpers.uploadFile)(fileName + ext, imageData); // push to rds

  let data = await (0, _helpers.push2RDS)(fileName, ext, name, link);
  res.send(data);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3VwbG9hZC1pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwidXBsb2FkIiwibXVsdGVyIiwiYXBwIiwiZXhwcmVzcyIsInJvdXRlciIsIlJvdXRlciIsIlBPUlQiLCJsb2dnZXIiLCJ3aW5zdG9uIiwiY3JlYXRlTG9nZ2VyIiwibGV2ZWwiLCJ0cmFuc3BvcnRzIiwiQ29uc29sZSIsImZvcm1hdCIsImNvbWJpbmUiLCJpbmZvIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsIm1vZHVsZSIsIl9fZmlsZW5hbWUiLCJuZXdyZWxpY0Zvcm1hdHRlciIsImVycm9ycyIsInN0YWNrIiwianNvbiIsInVzZSIsImxpc3RlbiIsInBvc3QiLCJhbnkiLCJyZXEiLCJyZXMiLCJpbWFnZSIsImZpbGVzIiwiYnVmZmVyIiwibmFtZSIsImJvZHkiLCJ0b0xvd2VyQ2FzZSIsImZpbGVOYW1lIiwiZXh0IiwibWltZVR5cGUiLCJpbWFnZURhdGEiLCJCdWZmZXIiLCJmcm9tIiwibGluayIsImRhdGEiLCJzZW5kIl0sIm1hcHBpbmdzIjoiOztBQUNBOztBQUNBOztBQUNBOztBQUdBOztBQUlBOztBQUNBOztBQVhBQSxPQUFPLENBQUMsVUFBRCxDQUFQOztBQUlBLE1BQU1DLE1BQU0sR0FBR0MsT0FBTSxFQUFyQjs7QUFDQSxNQUFNQyxHQUFHLEdBQUdDLFFBQU8sRUFBbkI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHRCxRQUFPLENBQUNFLE1BQVIsRUFBYjs7QUFDQSxNQUFNQyxJQUFJLEdBQUcsSUFBYjs7QUFLQSxNQUFNQyxNQUFNLEdBQUdDLFFBQU8sQ0FBQ0MsWUFBUixDQUFxQjtBQUNoQ0MsRUFBQUEsS0FBSyxFQUFFLE1BRHlCO0FBRWhDQyxFQUFBQSxVQUFVLEVBQUUsQ0FDVixJQUFJSCxRQUFPLENBQUNHLFVBQVIsQ0FBbUJDLE9BQXZCLEVBRFUsQ0FGb0I7QUFLaENDLEVBQUFBLE1BQU0sRUFBRUwsUUFBTyxDQUFDSyxNQUFSLENBQWVDLE9BQWYsQ0FDSk4sUUFBTyxDQUFDSyxNQUFSLENBQWUsQ0FBQ0UsSUFBRCxFQUFPQyxJQUFQLEtBQWdCQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0gsSUFBZCxFQUFvQjtBQUFDSSxJQUFBQSxNQUFNLEVBQUVDO0FBQVQsR0FBcEIsQ0FBL0IsR0FESSxFQUVKQyxnQkFBaUIsRUFGYixFQUdKYixRQUFPLENBQUNLLE1BQVIsQ0FBZVMsTUFBZixDQUFzQjtBQUFDQyxJQUFBQSxLQUFLLEVBQUU7QUFBUixHQUF0QixDQUhJLEVBSUpmLFFBQU8sQ0FBQ0ssTUFBUixDQUFlVyxJQUFmLEVBSkk7QUFMd0IsQ0FBckIsQ0FBZixDLENBYUE7QUFDQTs7O0FBR0F0QixHQUFHLENBQUN1QixHQUFKLENBQVEsR0FBUixFQUFhckIsTUFBYjtBQUVBRixHQUFHLENBQUN3QixNQUFKLENBQVdwQixJQUFYLEVBQWlCLE1BQU07QUFDbkJDLEVBQUFBLE1BQU0sQ0FBQ1EsSUFBUCxDQUFhLGtDQUFpQ1QsSUFBSyxFQUFuRDtBQUNILENBRkQ7QUFJQUYsTUFBTSxDQUFDdUIsSUFBUCxDQUFZLFNBQVosRUFBdUIzQixNQUFNLENBQUM0QixHQUFQLEVBQXZCLEVBQXFDLE9BQU1DLEdBQU4sRUFBV0MsR0FBWCxLQUFtQjtBQUNwRHZCLEVBQUFBLE1BQU0sQ0FBQ1EsSUFBUCxDQUFZLGlCQUFaO0FBQ0EsTUFBSWdCLEtBQUssR0FBR0YsR0FBRyxDQUFDRyxLQUFKLENBQVUsQ0FBVixFQUFhQyxNQUF6QjtBQUNBLE1BQUlDLElBQUksR0FBR0wsR0FBRyxDQUFDTSxJQUFKLENBQVNELElBQVQsQ0FBY0UsV0FBZCxFQUFYO0FBQ0EsTUFBSUMsUUFBUSxHQUFHLHdCQUFmLENBSm9ELENBS3BEOztBQUNBOUIsRUFBQUEsTUFBTSxDQUFDUSxJQUFQLENBQVlzQixRQUFaLEVBQXNCSCxJQUF0QixFQUE0QkgsS0FBNUIsRUFOb0QsQ0FRcEQ7O0FBQ0EsTUFBSU8sR0FBRyxHQUFHLHNCQUFRVCxHQUFHLENBQUNNLElBQUosQ0FBU0ksUUFBakIsQ0FBVixDQVRvRCxDQVdwRDs7QUFDQSxNQUFJQyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZWCxLQUFaLEVBQW1CLFFBQW5CLENBQWhCLENBWm9ELENBY3BEOztBQUNBLE1BQUlZLElBQUksR0FBRyxNQUFNLHlCQUFXTixRQUFRLEdBQUdDLEdBQXRCLEVBQTJCRSxTQUEzQixDQUFqQixDQWZvRCxDQWlCcEQ7O0FBQ0EsTUFBSUksSUFBSSxHQUFHLE1BQU0sdUJBQVNQLFFBQVQsRUFBbUJDLEdBQW5CLEVBQXdCSixJQUF4QixFQUE4QlMsSUFBOUIsQ0FBakI7QUFDQWIsRUFBQUEsR0FBRyxDQUFDZSxJQUFKLENBQVNELElBQVQ7QUFDRCxDQXBCSCIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ25ld3JlbGljJyk7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJ1xuaW1wb3J0IGV4cHJlc3NBc3luY0Vycm9ycyBmcm9tICdleHByZXNzLWFzeW5jLWVycm9ycydcbmltcG9ydCBtdWx0ZXIgZnJvbSAnbXVsdGVyJ1xuY29uc3QgdXBsb2FkID0gbXVsdGVyKClcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKVxuaW1wb3J0IHsgdW5pcXVlSWQsIHVwbG9hZEZpbGUsIGZpbGVFeHQsIHB1c2gyUkRTIH0gZnJvbSAnLi9zcmMvaGVscGVycy5qcydcbnZhciByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuY29uc3QgUE9SVCA9IDgwODBcblxuaW1wb3J0IHdpbnN0b24gZnJvbSAnd2luc3RvbidcbmltcG9ydCBuZXdyZWxpY0Zvcm1hdHRlciBmcm9tICdAbmV3cmVsaWMvd2luc3Rvbi1lbnJpY2hlcidcblxuY29uc3QgbG9nZ2VyID0gd2luc3Rvbi5jcmVhdGVMb2dnZXIoe1xuICAgIGxldmVsOiAnaW5mbycsXG4gICAgdHJhbnNwb3J0czogW1xuICAgICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5Db25zb2xlKClcbiAgICBdLFxuICAgIGZvcm1hdDogd2luc3Rvbi5mb3JtYXQuY29tYmluZShcbiAgICAgICAgd2luc3Rvbi5mb3JtYXQoKGluZm8sIG9wdHMpID0+IE9iamVjdC5hc3NpZ24oaW5mbywge21vZHVsZTogX19maWxlbmFtZX0pKSgpLFxuICAgICAgICBuZXdyZWxpY0Zvcm1hdHRlcigpLFxuICAgICAgICB3aW5zdG9uLmZvcm1hdC5lcnJvcnMoe3N0YWNrOiB0cnVlfSksXG4gICAgICAgIHdpbnN0b24uZm9ybWF0Lmpzb24oKVxuICAgIClcbiAgfSk7XG5cbi8vIGZvciB0ZXN0aW5nIGxvY2FsbHk6IG5vZGUgLXIgZG90ZW52L2NvbmZpZyBpbmRleC5qcyAgXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yODMwNTEyMC9kaWZmZXJlbmNlcy1iZXR3ZWVuLWV4cHJlc3Mtcm91dGVyLWFuZC1hcHAtZ2V0XG5cblxuYXBwLnVzZSgnLycsIHJvdXRlcilcblxuYXBwLmxpc3RlbihQT1JULCAoKSA9PiB7XG4gICAgbG9nZ2VyLmluZm8oYFVwbG9hZCBTZXJ2aWNlIHN0YXJ0ZWQgb24gcG9ydCAke1BPUlR9YClcbn0pXG5cbnJvdXRlci5wb3N0KCcvdXBsb2FkJywgdXBsb2FkLmFueSgpLCBhc3luYyhyZXEsIHJlcykgPT4ge1xuICAgIGxvZ2dlci5pbmZvKFwiU3RhcnRpbmcgdXBsb2FkXCIpXG4gICAgbGV0IGltYWdlID0gcmVxLmZpbGVzWzBdLmJ1ZmZlclxuICAgIGxldCBuYW1lID0gcmVxLmJvZHkubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCBmaWxlTmFtZSA9IHVuaXF1ZUlkKClcbiAgICAvLyBwYXJzZSBmcm9tIGJvZHlcbiAgICBsb2dnZXIuaW5mbyhmaWxlTmFtZSwgbmFtZSwgaW1hZ2UpXG5cbiAgICAvLyBkZXRlcm1pbmUgZmlsZSBleHRlbnNpb25cbiAgICBsZXQgZXh0ID0gZmlsZUV4dChyZXEuYm9keS5taW1lVHlwZSlcblxuICAgIC8vIGJhc2U2NCBpbWFnZSB0byBiaW5hcnkgZGF0YVxuICAgIGxldCBpbWFnZURhdGEgPSBCdWZmZXIuZnJvbShpbWFnZSwgJ2Jhc2U2NCcpXG5cbiAgICAvLyB1cGxvYWQgdG8gczNcbiAgICBsZXQgbGluayA9IGF3YWl0IHVwbG9hZEZpbGUoZmlsZU5hbWUgKyBleHQsIGltYWdlRGF0YSlcblxuICAgIC8vIHB1c2ggdG8gcmRzXG4gICAgbGV0IGRhdGEgPSBhd2FpdCBwdXNoMlJEUyhmaWxlTmFtZSwgZXh0LCBuYW1lLCBsaW5rKVxuICAgIHJlcy5zZW5kKGRhdGEpIFxuICB9KTsiXX0=