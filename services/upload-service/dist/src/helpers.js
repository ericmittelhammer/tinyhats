"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fileExt = void 0;
exports.push2RDS = push2RDS;
exports.uniqueId = void 0;
exports.uploadFile = uploadFile;

var _awsSdk = require("aws-sdk");

var _generateUniqueId = require("generate-unique-id");

var _mysql = require("mysql");

const ID = process.env.S3_ID;
const SECRET = process.env.S3_SECRET;
const BUCKET_NAME = 'tinyhats';
const HOST = process.env.HOST;
const PASSWORD = process.env.PASSWORD;

const con = _mysql.createConnection({
  host: HOST,
  port: '3306',
  user: "admin",
  password: PASSWORD
});

const s3 = new _awsSdk.S3({
  accessKeyId: ID,
  secretAccessKey: SECRET
});

async function uploadFile(fileName, fileContent) {
  let link = "";
  let key = fileName; // Setting up S3 upload parameters

  const params = {
    Bucket: BUCKET_NAME,
    Key: key,
    // File name you want to save as in S3
    Body: fileContent
  }; // Uploading files to the bucket

  s3.upload(params, (err, data) => {
    if (err) {
      throw err;
    }

    link = data.Location;
    console.log(`File uploaded successfully. ${link}`);
  });
  return `https://${BUCKET_NAME}.s3.amazonaws.com/${key}`;
}

;

const fileExt = ext => {
  if (ext == "image/png") {
    return '.png';
  } else if (ext == "image/jpeg") {
    return '.jpeg';
  } else if (ext == "image/jpg") {
    return '.jpg';
  } else {
    process.exit();
  }
};

exports.fileExt = fileExt;

const uniqueId = () => {
  const id = _generateUniqueId({
    length: 16
  }); // generate length 16 random file name


  return id;
};

exports.uniqueId = uniqueId;

async function push2RDS(key, ext, name, link) {
  con.connect(function (err) {
    con.query(`INSERT INTO main.images (keyId, fileName, url, description, approve) VALUES ('${key}', '${key + ext}', '${link}', '${name}', 'false')`, function (err, result, fields) {
      if (err) console.log(err);
      if (result) console.log({
        key: key,
        fileName: key + ext,
        url: link,
        description: name,
        approve: "false"
      });
      if (fields) console.log(fields);
    }); // connect to mysql and push data
  });
  return {
    key: key,
    fileName: key + ext,
    url: link,
    description: name,
    approve: "false"
  };
}

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbIklEIiwicHJvY2VzcyIsImVudiIsIlMzX0lEIiwiU0VDUkVUIiwiUzNfU0VDUkVUIiwiQlVDS0VUX05BTUUiLCJIT1NUIiwiUEFTU1dPUkQiLCJjb24iLCJteXNxbCIsImNyZWF0ZUNvbm5lY3Rpb24iLCJob3N0IiwicG9ydCIsInVzZXIiLCJwYXNzd29yZCIsInMzIiwiQVdTIiwiUzMiLCJhY2Nlc3NLZXlJZCIsInNlY3JldEFjY2Vzc0tleSIsInVwbG9hZEZpbGUiLCJmaWxlTmFtZSIsImZpbGVDb250ZW50IiwibGluayIsImtleSIsInBhcmFtcyIsIkJ1Y2tldCIsIktleSIsIkJvZHkiLCJ1cGxvYWQiLCJlcnIiLCJkYXRhIiwiTG9jYXRpb24iLCJjb25zb2xlIiwibG9nIiwiZmlsZUV4dCIsImV4dCIsImV4aXQiLCJ1bmlxdWVJZCIsImlkIiwiZ2VuZXJhdGVVbmlxdWVJZCIsImxlbmd0aCIsInB1c2gyUkRTIiwibmFtZSIsImNvbm5lY3QiLCJxdWVyeSIsInJlc3VsdCIsImZpZWxkcyIsInVybCIsImRlc2NyaXB0aW9uIiwiYXBwcm92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLEtBQXZCO0FBQ0EsTUFBTUMsTUFBTSxHQUFHSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUcsU0FBM0I7QUFDQSxNQUFNQyxXQUFXLEdBQUcsVUFBcEI7QUFFQSxNQUFNQyxJQUFJLEdBQUdOLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxJQUF6QjtBQUNBLE1BQU1DLFFBQVEsR0FBR1AsT0FBTyxDQUFDQyxHQUFSLENBQVlNLFFBQTdCOztBQUVBLE1BQU1DLEdBQUcsR0FBR0MsTUFBSyxDQUFDQyxnQkFBTixDQUF1QjtBQUMvQkMsRUFBQUEsSUFBSSxFQUFFTCxJQUR5QjtBQUUvQk0sRUFBQUEsSUFBSSxFQUFF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RyxHQUFHWSxHQUEzQjtBQUFnQ1ksSUFBQUEsR0FBRyxFQUFFekIsSUFBckM7QUFBMkMwQixJQUFBQSxXQUFXLEVBQUVOLElBQXhEO0FBQThETyxJQUFBQSxPQUFPLEVBQUU7QUFBdkUsR0FBUDtBQUNIOztBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFXUyBmcm9tICdhd3Mtc2RrJztcbmltcG9ydCBnZW5lcmF0ZVVuaXF1ZUlkIGZyb20gJ2dlbmVyYXRlLXVuaXF1ZS1pZCdcbmltcG9ydCBteXNxbCBmcm9tICdteXNxbCdcblxuY29uc3QgSUQgPSBwcm9jZXNzLmVudi5TM19JRDtcbmNvbnN0IFNFQ1JFVCA9IHByb2Nlc3MuZW52LlMzX1NFQ1JFVDtcbmNvbnN0IEJVQ0tFVF9OQU1FID0gJ3RpbnloYXRzJztcblxuY29uc3QgSE9TVCA9IHByb2Nlc3MuZW52LkhPU1Q7XG5jb25zdCBQQVNTV09SRCA9IHByb2Nlc3MuZW52LlBBU1NXT1JEO1xuXG5jb25zdCBjb24gPSBteXNxbC5jcmVhdGVDb25uZWN0aW9uKHtcbiAgICBob3N0OiBIT1NULFxuICAgIHBvcnQ6ICczMzA2JyxcbiAgICB1c2VyOiBcImFkbWluXCIsXG4gICAgcGFzc3dvcmQ6IFBBU1NXT1JELFxufSk7XG5cbmNvbnN0IHMzID0gbmV3IEFXUy5TMyh7XG4gICAgYWNjZXNzS2V5SWQ6IElELFxuICAgIHNlY3JldEFjY2Vzc0tleTogU0VDUkVUXG59KTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwbG9hZEZpbGUoZmlsZU5hbWUsIGZpbGVDb250ZW50KSB7XG4gICAgbGV0IGxpbmsgPSBcIlwiXG4gICAgbGV0IGtleSA9IGZpbGVOYW1lXG4gICAgLy8gU2V0dGluZyB1cCBTMyB1cGxvYWQgcGFyYW1ldGVyc1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgQnVja2V0OiBCVUNLRVRfTkFNRSxcbiAgICAgICAgS2V5OiBrZXksIC8vIEZpbGUgbmFtZSB5b3Ugd2FudCB0byBzYXZlIGFzIGluIFMzXG4gICAgICAgIEJvZHk6IGZpbGVDb250ZW50XG4gICAgfTtcblxuICAgIC8vIFVwbG9hZGluZyBmaWxlcyB0byB0aGUgYnVja2V0XG4gICAgczMudXBsb2FkKHBhcmFtcywgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgbGluayA9IGRhdGEuTG9jYXRpb25cbiAgICAgICAgY29uc29sZS5sb2coYEZpbGUgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5LiAke2xpbmt9YCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGBodHRwczovLyR7QlVDS0VUX05BTUV9LnMzLmFtYXpvbmF3cy5jb20vJHtrZXl9YFxufTtcblxuZXhwb3J0IGNvbnN0IGZpbGVFeHQgPSAoZXh0KSA9PiB7XG4gICAgaWYgKGV4dCA9PSBcImltYWdlL3BuZ1wiKSB7XG4gICAgICAgIHJldHVybiAnLnBuZydcbiAgICB9IGVsc2UgaWYgKGV4dCA9PSBcImltYWdlL2pwZWdcIikge1xuICAgICAgICByZXR1cm4gJy5qcGVnJ1xuICAgIH0gZWxzZSBpZiAoZXh0ID09IFwiaW1hZ2UvanBnXCIpIHtcbiAgICAgICAgcmV0dXJuICcuanBnJ1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgpXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgdW5pcXVlSWQgPSAoKSA9PiB7XG4gICAgY29uc3QgaWQgPSBnZW5lcmF0ZVVuaXF1ZUlkKHtcbiAgICAgICAgbGVuZ3RoOiAxNlxuICAgIH0pO1xuICAgIC8vIGdlbmVyYXRlIGxlbmd0aCAxNiByYW5kb20gZmlsZSBuYW1lXG5cbiAgICByZXR1cm4gaWRcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHB1c2gyUkRTKGtleSwgZXh0LCBuYW1lLCBsaW5rKSB7XG4gICAgY29uLmNvbm5lY3QoZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbi5xdWVyeShgSU5TRVJUIElOVE8gbWFpbi5pbWFnZXMgKGtleUlkLCBmaWxlTmFtZSwgdXJsLCBkZXNjcmlwdGlvbiwgYXBwcm92ZSkgVkFMVUVTICgnJHtrZXl9JywgJyR7a2V5ICsgZXh0fScsICcke2xpbmt9JywgJyR7bmFtZX0nLCAnZmFsc2UnKWAsIGZ1bmN0aW9uKGVyciwgcmVzdWx0LCBmaWVsZHMpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSBjb25zb2xlLmxvZyh7a2V5OiBrZXksIGZpbGVOYW1lOiBrZXkgKyBleHQsIHVybDogbGluaywgZGVzY3JpcHRpb246IG5hbWUsIGFwcHJvdmU6IFwiZmFsc2VcIn0pO1xuICAgICAgICAgICAgaWYgKGZpZWxkcykgY29uc29sZS5sb2coZmllbGRzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNvbm5lY3QgdG8gbXlzcWwgYW5kIHB1c2ggZGF0YVxuICAgIH0pO1xuICAgIHJldHVybiB7a2V5OiBrZXksIGZpbGVOYW1lOiBrZXkgKyBleHQsIHVybDogbGluaywgZGVzY3JpcHRpb246IG5hbWUsIGFwcHJvdmU6IFwiZmFsc2VcIn1cbn07Il19