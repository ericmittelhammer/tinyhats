"use strict";

var _express = require("express");

var _expressAsyncErrors = require("express-async-errors");

var _multer = require("multer");

var _helpers = require("./src/helpers.js");

var _winston = require("winston");

var _winstonEnricher = require("@newrelic/winston-enricher");

require('newrelic');

const upload = _multer();

const app = _express();

var router = _express.Router();

const PORT = 8080;

const logger = _winston.createLogger({
  level: 'info',
  exitOnError: false,
  transports: [new _winston.transports.Console({
    handleExceptions: true,
    handleRejections: true
  })],
  format: _winston.format.combine(_winston.format((info, opts) => Object.assign(info, {
    module: __filename
  }))(), _winstonEnricher(), _winston.format.json())
}); // for testing locally: node -r dotenv/config index.js  
// https://stackoverflow.com/questions/28305120/differences-between-express-router-and-app-get


app.use('/', router);
app.listen(PORT, () => {
  logger.info(`Upload Service started on port ${PORT}`);
});
router.post('/upload', upload.any(), async (req, res) => {
  logger.info("Starting upload");
  let image = req.files[0].buffer;
  let name = req.body.name.toLowerCase();
  let fileName = (0, _helpers.uniqueId)(); // parse from body

  logger.info(fileName, name, image); // determine file extension

  let ext = (0, _helpers.fileExt)(req.body.mimeType); // base64 image to binary data

  let imageData = Buffer.from(image, 'base64'); // upload to s3

  let link = await (0, _helpers.uploadFile)(fileName + ext, imageData); // push to rds

  let data = await (0, _helpers.push2RDS)(fileName, ext, name, link);
  res.send(data);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJ1cGxvYWQiLCJtdWx0ZXIiLCJhcHAiLCJleHByZXNzIiwicm91dGVyIiwiUm91dGVyIiwiUE9SVCIsImxvZ2dlciIsIndpbnN0b24iLCJjcmVhdGVMb2dnZXIiLCJsZXZlbCIsImV4aXRPbkVycm9yIiwidHJhbnNwb3J0cyIsIkNvbnNvbGUiLCJoYW5kbGVFeGNlcHRpb25zIiwiaGFuZGxlUmVqZWN0aW9ucyIsImZvcm1hdCIsImNvbWJpbmUiLCJpbmZvIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsIm1vZHVsZSIsIl9fZmlsZW5hbWUiLCJuZXdyZWxpY0Zvcm1hdHRlciIsImpzb24iLCJ1c2UiLCJsaXN0ZW4iLCJwb3N0IiwiYW55IiwicmVxIiwicmVzIiwiaW1hZ2UiLCJmaWxlcyIsImJ1ZmZlciIsIm5hbWUiLCJib2R5IiwidG9Mb3dlckNhc2UiLCJmaWxlTmFtZSIsImV4dCIsIm1pbWVUeXBlIiwiaW1hZ2VEYXRhIiwiQnVmZmVyIiwiZnJvbSIsImxpbmsiLCJkYXRhIiwic2VuZCJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7QUFJQTs7QUFDQTs7QUFYQUEsT0FBTyxDQUFDLFVBQUQsQ0FBUDs7QUFJQSxNQUFNQyxNQUFNLEdBQUdDLE9BQU0sRUFBckI7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHQyxRQUFPLEVBQW5COztBQUVBLElBQUlDLE1BQU0sR0FBR0QsUUFBTyxDQUFDRSxNQUFSLEVBQWI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHLElBQWI7O0FBS0EsTUFBTUMsTUFBTSxHQUFHQyxRQUFPLENBQUNDLFlBQVIsQ0FBcUI7QUFDaENDLEVBQUFBLEtBQUssRUFBRSxNQUR5QjtBQUVoQ0MsRUFBQUEsV0FBVyxFQUFFLEtBRm1CO0FBR2hDQyxFQUFBQSxVQUFVLEVBQUUsQ0FDVixJQUFJSixRQUFPLENBQUNJLFVBQVIsQ0FBbUJDLE9BQXZCLENBQStCO0FBQzdCQyxJQUFBQSxnQkFBZ0IsRUFBRSxJQURXO0FBRTdCQyxJQUFBQSxnQkFBZ0IsRUFBRTtBQUZXLEdBQS9CLENBRFUsQ0FIb0I7QUFTaENDLEVBQUFBLE1BQU0sRUFBRVIsUUFBTyxDQUFDUSxNQUFSLENBQWVDLE9BQWYsQ0FDSlQsUUFBTyxDQUFDUSxNQUFSLENBQWUsQ0FBQ0UsSUFBRCxFQUFPQyxJQUFQLEtBQWdCQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0gsSUFBZCxFQUFvQjtBQUFDSSxJQUFBQSxNQUFNLEVBQUVDO0FBQVQsR0FBcEIsQ0FBL0IsR0FESSxFQUVKQyxnQkFBaUIsRUFGYixFQUdKaEIsUUFBTyxDQUFDUSxNQUFSLENBQWVTLElBQWYsRUFISTtBQVR3QixDQUFyQixDQUFmLEMsQ0FnQkE7QUFDQTs7O0FBR0F2QixHQUFHLENBQUN3QixHQUFKLENBQVEsR0FBUixFQUFhdEIsTUFBYjtBQUVBRixHQUFHLENBQUN5QixNQUFKLENBQVdyQixJQUFYLEVBQWlCLE1BQU07QUFDbkJDLEVBQUFBLE1BQU0sQ0FBQ1csSUFBUCxDQUFhLGtDQUFpQ1osSUFBSyxFQUFuRDtBQUNILENBRkQ7QUFJQUYsTUFBTSxDQUFDd0IsSUFBUCxDQUFZLFNBQVosRUFBdUI1QixNQUFNLENBQUM2QixHQUFQLEVBQXZCLEVBQXFDLE9BQU1DLEdBQU4sRUFBV0MsR0FBWCxLQUFtQjtBQUNwRHhCLEVBQUFBLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLGlCQUFaO0FBQ0EsTUFBSWMsS0FBSyxHQUFHRixHQUFHLENBQUNHLEtBQUosQ0FBVSxDQUFWLEVBQWFDLE1BQXpCO0FBQ0EsTUFBSUMsSUFBSSxHQUFHTCxHQUFHLENBQUNNLElBQUosQ0FBU0QsSUFBVCxDQUFjRSxXQUFkLEVBQVg7QUFDQSxNQUFJQyxRQUFRLEdBQUcsd0JBQWYsQ0FKb0QsQ0FLcEQ7O0FBQ0EvQixFQUFBQSxNQUFNLENBQUNXLElBQVAsQ0FBWW9CLFFBQVosRUFBc0JILElBQXRCLEVBQTRCSCxLQUE1QixFQU5vRCxDQVFwRDs7QUFDQSxNQUFJTyxHQUFHLEdBQUcsc0JBQVFULEdBQUcsQ0FBQ00sSUFBSixDQUFTSSxRQUFqQixDQUFWLENBVG9ELENBV3BEOztBQUNBLE1BQUlDLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlYLEtBQVosRUFBbUIsUUFBbkIsQ0FBaEIsQ0Fab0QsQ0FjcEQ7O0FBQ0EsTUFBSVksSUFBSSxHQUFHLE1BQU0seUJBQVdOLFFBQVEsR0FBR0MsR0FBdEIsRUFBMkJFLFNBQTNCLENBQWpCLENBZm9ELENBaUJwRDs7QUFDQSxNQUFJSSxJQUFJLEdBQUcsTUFBTSx1QkFBU1AsUUFBVCxFQUFtQkMsR0FBbkIsRUFBd0JKLElBQXhCLEVBQThCUyxJQUE5QixDQUFqQjtBQUNBYixFQUFBQSxHQUFHLENBQUNlLElBQUosQ0FBU0QsSUFBVDtBQUNELENBcEJIIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnbmV3cmVsaWMnKTtcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgZXhwcmVzc0FzeW5jRXJyb3JzIGZyb20gJ2V4cHJlc3MtYXN5bmMtZXJyb3JzJ1xuaW1wb3J0IG11bHRlciBmcm9tICdtdWx0ZXInXG5jb25zdCB1cGxvYWQgPSBtdWx0ZXIoKVxuY29uc3QgYXBwID0gZXhwcmVzcygpXG5pbXBvcnQgeyB1bmlxdWVJZCwgdXBsb2FkRmlsZSwgZmlsZUV4dCwgcHVzaDJSRFMgfSBmcm9tICcuL3NyYy9oZWxwZXJzLmpzJ1xudmFyIHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5jb25zdCBQT1JUID0gODA4MFxuXG5pbXBvcnQgd2luc3RvbiBmcm9tICd3aW5zdG9uJ1xuaW1wb3J0IG5ld3JlbGljRm9ybWF0dGVyIGZyb20gJ0BuZXdyZWxpYy93aW5zdG9uLWVucmljaGVyJ1xuXG5jb25zdCBsb2dnZXIgPSB3aW5zdG9uLmNyZWF0ZUxvZ2dlcih7XG4gICAgbGV2ZWw6ICdpbmZvJyxcbiAgICBleGl0T25FcnJvcjogZmFsc2UsXG4gICAgdHJhbnNwb3J0czogW1xuICAgICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5Db25zb2xlKHtcbiAgICAgICAgaGFuZGxlRXhjZXB0aW9uczogdHJ1ZSxcbiAgICAgICAgaGFuZGxlUmVqZWN0aW9uczogdHJ1ZVxuICAgICAgfSlcbiAgICBdLFxuICAgIGZvcm1hdDogd2luc3Rvbi5mb3JtYXQuY29tYmluZShcbiAgICAgICAgd2luc3Rvbi5mb3JtYXQoKGluZm8sIG9wdHMpID0+IE9iamVjdC5hc3NpZ24oaW5mbywge21vZHVsZTogX19maWxlbmFtZX0pKSgpLFxuICAgICAgICBuZXdyZWxpY0Zvcm1hdHRlcigpLFxuICAgICAgICB3aW5zdG9uLmZvcm1hdC5qc29uKClcbiAgICApXG4gIH0pO1xuXG4vLyBmb3IgdGVzdGluZyBsb2NhbGx5OiBub2RlIC1yIGRvdGVudi9jb25maWcgaW5kZXguanMgIFxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjgzMDUxMjAvZGlmZmVyZW5jZXMtYmV0d2Vlbi1leHByZXNzLXJvdXRlci1hbmQtYXBwLWdldFxuXG5cbmFwcC51c2UoJy8nLCByb3V0ZXIpXG5cbmFwcC5saXN0ZW4oUE9SVCwgKCkgPT4ge1xuICAgIGxvZ2dlci5pbmZvKGBVcGxvYWQgU2VydmljZSBzdGFydGVkIG9uIHBvcnQgJHtQT1JUfWApXG59KVxuXG5yb3V0ZXIucG9zdCgnL3VwbG9hZCcsIHVwbG9hZC5hbnkoKSwgYXN5bmMocmVxLCByZXMpID0+IHtcbiAgICBsb2dnZXIuaW5mbyhcIlN0YXJ0aW5nIHVwbG9hZFwiKVxuICAgIGxldCBpbWFnZSA9IHJlcS5maWxlc1swXS5idWZmZXJcbiAgICBsZXQgbmFtZSA9IHJlcS5ib2R5Lm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBsZXQgZmlsZU5hbWUgPSB1bmlxdWVJZCgpXG4gICAgLy8gcGFyc2UgZnJvbSBib2R5XG4gICAgbG9nZ2VyLmluZm8oZmlsZU5hbWUsIG5hbWUsIGltYWdlKVxuXG4gICAgLy8gZGV0ZXJtaW5lIGZpbGUgZXh0ZW5zaW9uXG4gICAgbGV0IGV4dCA9IGZpbGVFeHQocmVxLmJvZHkubWltZVR5cGUpXG5cbiAgICAvLyBiYXNlNjQgaW1hZ2UgdG8gYmluYXJ5IGRhdGFcbiAgICBsZXQgaW1hZ2VEYXRhID0gQnVmZmVyLmZyb20oaW1hZ2UsICdiYXNlNjQnKVxuXG4gICAgLy8gdXBsb2FkIHRvIHMzXG4gICAgbGV0IGxpbmsgPSBhd2FpdCB1cGxvYWRGaWxlKGZpbGVOYW1lICsgZXh0LCBpbWFnZURhdGEpXG5cbiAgICAvLyBwdXNoIHRvIHJkc1xuICAgIGxldCBkYXRhID0gYXdhaXQgcHVzaDJSRFMoZmlsZU5hbWUsIGV4dCwgbmFtZSwgbGluaylcbiAgICByZXMuc2VuZChkYXRhKSBcbiAgfSk7Il19