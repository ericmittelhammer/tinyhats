"use strict";

var _express = require("express");

var _multer = require("multer");

var _helpers = require("./src/helpers.js");

require('newrelic');

const upload = _multer();

const app = _express();

var router = _express.Router();

const PORT = 8080; // for testing locally: node -r dotenv/config index.js  
// https://stackoverflow.com/questions/28305120/differences-between-express-router-and-app-get

app.use('/', router);
app.listen(PORT, () => {
  console.log(`API Gateway started on port ${PORT}`);
});
router.post('/upload', upload.any(), async (req, res) => {
  console.log("Started");
  let image = req.files[0].buffer;
  let name = req.body.name.toLowerCase();
  let fileName = (0, _helpers.uniqueId)(); // parse from body

  console.log(fileName, name, image); // determine file extension

  let ext = (0, _helpers.fileExt)(req.body.mimeType); // base64 image to binary data

  console.log("Image received");
  let imageData = Buffer.from(image, 'base64'); // upload to s3

  let link = await (0, _helpers.uploadFile)(fileName + ext, imageData); // push to rds

  let data = await (0, _helpers.push2RDS)(fileName, ext, name, link);
  res.send(data);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJ1cGxvYWQiLCJtdWx0ZXIiLCJhcHAiLCJleHByZXNzIiwicm91dGVyIiwiUm91dGVyIiwiUE9SVCIsInVzZSIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciLCJwb3N0IiwiYW55IiwicmVxIiwicmVzIiwiaW1hZ2UiLCJmaWxlcyIsImJ1ZmZlciIsIm5hbWUiLCJib2R5IiwidG9Mb3dlckNhc2UiLCJmaWxlTmFtZSIsImV4dCIsIm1pbWVUeXBlIiwiaW1hZ2VEYXRhIiwiQnVmZmVyIiwiZnJvbSIsImxpbmsiLCJkYXRhIiwic2VuZCJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7QUFDQTs7QUFHQTs7QUFMQUEsT0FBTyxDQUFDLFVBQUQsQ0FBUDs7QUFHQSxNQUFNQyxNQUFNLEdBQUdDLE9BQU0sRUFBckI7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHQyxRQUFPLEVBQW5COztBQUVBLElBQUlDLE1BQU0sR0FBR0QsUUFBTyxDQUFDRSxNQUFSLEVBQWI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHLElBQWIsQyxDQUVBO0FBQ0E7O0FBR0FKLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLEdBQVIsRUFBYUgsTUFBYjtBQUVBRixHQUFHLENBQUNNLE1BQUosQ0FBV0YsSUFBWCxFQUFpQixNQUFNO0FBQ25CRyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSwrQkFBOEJKLElBQUssRUFBaEQ7QUFDSCxDQUZEO0FBSUFGLE1BQU0sQ0FBQ08sSUFBUCxDQUFZLFNBQVosRUFBdUJYLE1BQU0sQ0FBQ1ksR0FBUCxFQUF2QixFQUFxQyxPQUFNQyxHQUFOLEVBQVdDLEdBQVgsS0FBbUI7QUFDcERMLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFNBQVo7QUFDQSxNQUFJSyxLQUFLLEdBQUdGLEdBQUcsQ0FBQ0csS0FBSixDQUFVLENBQVYsRUFBYUMsTUFBekI7QUFDQSxNQUFJQyxJQUFJLEdBQUdMLEdBQUcsQ0FBQ00sSUFBSixDQUFTRCxJQUFULENBQWNFLFdBQWQsRUFBWDtBQUNBLE1BQUlDLFFBQVEsR0FBRyx3QkFBZixDQUpvRCxDQUtwRDs7QUFDQVosRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlXLFFBQVosRUFBc0JILElBQXRCLEVBQTRCSCxLQUE1QixFQU5vRCxDQVFwRDs7QUFDQSxNQUFJTyxHQUFHLEdBQUcsc0JBQVFULEdBQUcsQ0FBQ00sSUFBSixDQUFTSSxRQUFqQixDQUFWLENBVG9ELENBV3BEOztBQUNBZCxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxnQkFBWjtBQUNBLE1BQUljLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlYLEtBQVosRUFBbUIsUUFBbkIsQ0FBaEIsQ0Fib0QsQ0FlcEQ7O0FBQ0EsTUFBSVksSUFBSSxHQUFHLE1BQU0seUJBQVdOLFFBQVEsR0FBR0MsR0FBdEIsRUFBMkJFLFNBQTNCLENBQWpCLENBaEJvRCxDQWtCcEQ7O0FBQ0EsTUFBSUksSUFBSSxHQUFHLE1BQU0sdUJBQVNQLFFBQVQsRUFBbUJDLEdBQW5CLEVBQXdCSixJQUF4QixFQUE4QlMsSUFBOUIsQ0FBakI7QUFDQWIsRUFBQUEsR0FBRyxDQUFDZSxJQUFKLENBQVNELElBQVQ7QUFDRCxDQXJCSCIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ25ld3JlbGljJyk7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJ1xuaW1wb3J0IG11bHRlciBmcm9tICdtdWx0ZXInXG5jb25zdCB1cGxvYWQgPSBtdWx0ZXIoKVxuY29uc3QgYXBwID0gZXhwcmVzcygpXG5pbXBvcnQgeyB1bmlxdWVJZCwgdXBsb2FkRmlsZSwgZmlsZUV4dCwgcHVzaDJSRFMgfSBmcm9tICcuL3NyYy9oZWxwZXJzLmpzJ1xudmFyIHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5jb25zdCBQT1JUID0gODA4MFxuXG4vLyBmb3IgdGVzdGluZyBsb2NhbGx5OiBub2RlIC1yIGRvdGVudi9jb25maWcgaW5kZXguanMgIFxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjgzMDUxMjAvZGlmZmVyZW5jZXMtYmV0d2Vlbi1leHByZXNzLXJvdXRlci1hbmQtYXBwLWdldFxuXG5cbmFwcC51c2UoJy8nLCByb3V0ZXIpXG5cbmFwcC5saXN0ZW4oUE9SVCwgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBBUEkgR2F0ZXdheSBzdGFydGVkIG9uIHBvcnQgJHtQT1JUfWApXG59KVxuXG5yb3V0ZXIucG9zdCgnL3VwbG9hZCcsIHVwbG9hZC5hbnkoKSwgYXN5bmMocmVxLCByZXMpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlN0YXJ0ZWRcIilcbiAgICBsZXQgaW1hZ2UgPSByZXEuZmlsZXNbMF0uYnVmZmVyXG4gICAgbGV0IG5hbWUgPSByZXEuYm9keS5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGZpbGVOYW1lID0gdW5pcXVlSWQoKVxuICAgIC8vIHBhcnNlIGZyb20gYm9keVxuICAgIGNvbnNvbGUubG9nKGZpbGVOYW1lLCBuYW1lLCBpbWFnZSlcblxuICAgIC8vIGRldGVybWluZSBmaWxlIGV4dGVuc2lvblxuICAgIGxldCBleHQgPSBmaWxlRXh0KHJlcS5ib2R5Lm1pbWVUeXBlKVxuXG4gICAgLy8gYmFzZTY0IGltYWdlIHRvIGJpbmFyeSBkYXRhXG4gICAgY29uc29sZS5sb2coXCJJbWFnZSByZWNlaXZlZFwiKVxuICAgIGxldCBpbWFnZURhdGEgPSBCdWZmZXIuZnJvbShpbWFnZSwgJ2Jhc2U2NCcpXG5cbiAgICAvLyB1cGxvYWQgdG8gczNcbiAgICBsZXQgbGluayA9IGF3YWl0IHVwbG9hZEZpbGUoZmlsZU5hbWUgKyBleHQsIGltYWdlRGF0YSlcblxuICAgIC8vIHB1c2ggdG8gcmRzXG4gICAgbGV0IGRhdGEgPSBhd2FpdCBwdXNoMlJEUyhmaWxlTmFtZSwgZXh0LCBuYW1lLCBsaW5rKVxuICAgIHJlcy5zZW5kKGRhdGEpIFxuICB9KTsiXX0=