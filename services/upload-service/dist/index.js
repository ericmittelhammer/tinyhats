"use strict";

var _express = require("express");

var _multer = require("multer");

var _helpers = require("./src/helpers.js");

var _winston = require("winston");

var _winstonEnricher = require("@newrelic/winston-enricher");

require('newrelic');

const upload = _multer();

const app = _express();

var router = _express.Router();

const PORT = 8080;

const logger = _winston.createLogger({
  level: 'info',
  exitOnError: false,
  transports: [new _winston.transports.Console({
    handleExceptions: true,
    handleRejections: true
  })],
  format: _winston.format.combine(_winston.format((info, opts) => Object.assign(info, {
    module: __filename
  }))(), _winstonEnricher(), _winston.format.json())
}); // for testing locally: node -r dotenv/config index.js  
// https://stackoverflow.com/questions/28305120/differences-between-express-router-and-app-get


app.use('/', router);
app.listen(PORT, () => {
  logger.info(`Upload Service started on port ${PORT}`);
});
router.post('/upload', upload.any(), async (req, res) => {
  logger.info("Starting upload");
  let image = req.files[0].buffer;
  let name = req.body.name.toLowerCase();
  let fileName = (0, _helpers.uniqueId)(); // parse from body

  logger.info(fileName, name, image); // determine file extension

  let ext = (0, _helpers.fileExt)(req.body.mimeType); // base64 image to binary data

  let imageData = Buffer.from(image, 'base64'); // upload to s3

  let link = await (0, _helpers.uploadFile)(fileName + ext, imageData); // push to rds

  let data = await (0, _helpers.push2RDS)(fileName, ext, name, link);
  res.send(data);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJ1cGxvYWQiLCJtdWx0ZXIiLCJhcHAiLCJleHByZXNzIiwicm91dGVyIiwiUm91dGVyIiwiUE9SVCIsImxvZ2dlciIsIndpbnN0b24iLCJjcmVhdGVMb2dnZXIiLCJsZXZlbCIsImV4aXRPbkVycm9yIiwidHJhbnNwb3J0cyIsIkNvbnNvbGUiLCJoYW5kbGVFeGNlcHRpb25zIiwiaGFuZGxlUmVqZWN0aW9ucyIsImZvcm1hdCIsImNvbWJpbmUiLCJpbmZvIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsIm1vZHVsZSIsIl9fZmlsZW5hbWUiLCJuZXdyZWxpY0Zvcm1hdHRlciIsImpzb24iLCJ1c2UiLCJsaXN0ZW4iLCJwb3N0IiwiYW55IiwicmVxIiwicmVzIiwiaW1hZ2UiLCJmaWxlcyIsImJ1ZmZlciIsIm5hbWUiLCJib2R5IiwidG9Mb3dlckNhc2UiLCJmaWxlTmFtZSIsImV4dCIsIm1pbWVUeXBlIiwiaW1hZ2VEYXRhIiwiQnVmZmVyIiwiZnJvbSIsImxpbmsiLCJkYXRhIiwic2VuZCJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7QUFDQTs7QUFHQTs7QUFJQTs7QUFDQTs7QUFWQUEsT0FBTyxDQUFDLFVBQUQsQ0FBUDs7QUFHQSxNQUFNQyxNQUFNLEdBQUdDLE9BQU0sRUFBckI7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHQyxRQUFPLEVBQW5COztBQUVBLElBQUlDLE1BQU0sR0FBR0QsUUFBTyxDQUFDRSxNQUFSLEVBQWI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHLElBQWI7O0FBS0EsTUFBTUMsTUFBTSxHQUFHQyxRQUFPLENBQUNDLFlBQVIsQ0FBcUI7QUFDaENDLEVBQUFBLEtBQUssRUFBRSxNQUR5QjtBQUVoQ0MsRUFBQUEsV0FBVyxFQUFFLEtBRm1CO0FBR2hDQyxFQUFBQSxVQUFVLEVBQUUsQ0FDVixJQUFJSixRQUFPLENBQUNJLFVBQVIsQ0FBbUJDLE9BQXZCLENBQStCO0FBQzdCQyxJQUFBQSxnQkFBZ0IsRUFBRSxJQURXO0FBRTdCQyxJQUFBQSxnQkFBZ0IsRUFBRTtBQUZXLEdBQS9CLENBRFUsQ0FIb0I7QUFTaENDLEVBQUFBLE1BQU0sRUFBRVIsUUFBTyxDQUFDUSxNQUFSLENBQWVDLE9BQWYsQ0FDSlQsUUFBTyxDQUFDUSxNQUFSLENBQWUsQ0FBQ0UsSUFBRCxFQUFPQyxJQUFQLEtBQWdCQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0gsSUFBZCxFQUFvQjtBQUFDSSxJQUFBQSxNQUFNLEVBQUVDO0FBQVQsR0FBcEIsQ0FBL0IsR0FESSxFQUVKQyxnQkFBaUIsRUFGYixFQUdKaEIsUUFBTyxDQUFDUSxNQUFSLENBQWVTLElBQWYsRUFISTtBQVR3QixDQUFyQixDQUFmLEMsQ0FnQkE7QUFDQTs7O0FBR0F2QixHQUFHLENBQUN3QixHQUFKLENBQVEsR0FBUixFQUFhdEIsTUFBYjtBQUVBRixHQUFHLENBQUN5QixNQUFKLENBQVdyQixJQUFYLEVBQWlCLE1BQU07QUFDbkJDLEVBQUFBLE1BQU0sQ0FBQ1csSUFBUCxDQUFhLGtDQUFpQ1osSUFBSyxFQUFuRDtBQUNILENBRkQ7QUFJQUYsTUFBTSxDQUFDd0IsSUFBUCxDQUFZLFNBQVosRUFBdUI1QixNQUFNLENBQUM2QixHQUFQLEVBQXZCLEVBQXFDLE9BQU1DLEdBQU4sRUFBV0MsR0FBWCxLQUFtQjtBQUNwRHhCLEVBQUFBLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLGlCQUFaO0FBQ0EsTUFBSWMsS0FBSyxHQUFHRixHQUFHLENBQUNHLEtBQUosQ0FBVSxDQUFWLEVBQWFDLE1BQXpCO0FBQ0EsTUFBSUMsSUFBSSxHQUFHTCxHQUFHLENBQUNNLElBQUosQ0FBU0QsSUFBVCxDQUFjRSxXQUFkLEVBQVg7QUFDQSxNQUFJQyxRQUFRLEdBQUcsd0JBQWYsQ0FKb0QsQ0FLcEQ7O0FBQ0EvQixFQUFBQSxNQUFNLENBQUNXLElBQVAsQ0FBWW9CLFFBQVosRUFBc0JILElBQXRCLEVBQTRCSCxLQUE1QixFQU5vRCxDQVFwRDs7QUFDQSxNQUFJTyxHQUFHLEdBQUcsc0JBQVFULEdBQUcsQ0FBQ00sSUFBSixDQUFTSSxRQUFqQixDQUFWLENBVG9ELENBV3BEOztBQUNBLE1BQUlDLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlYLEtBQVosRUFBbUIsUUFBbkIsQ0FBaEIsQ0Fab0QsQ0FjcEQ7O0FBQ0EsTUFBSVksSUFBSSxHQUFHLE1BQU0seUJBQVdOLFFBQVEsR0FBR0MsR0FBdEIsRUFBMkJFLFNBQTNCLENBQWpCLENBZm9ELENBaUJwRDs7QUFDQSxNQUFJSSxJQUFJLEdBQUcsTUFBTSx1QkFBU1AsUUFBVCxFQUFtQkMsR0FBbkIsRUFBd0JKLElBQXhCLEVBQThCUyxJQUE5QixDQUFqQjtBQUNBYixFQUFBQSxHQUFHLENBQUNlLElBQUosQ0FBU0QsSUFBVDtBQUNELENBcEJIIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnbmV3cmVsaWMnKTtcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgbXVsdGVyIGZyb20gJ211bHRlcidcbmNvbnN0IHVwbG9hZCA9IG11bHRlcigpXG5jb25zdCBhcHAgPSBleHByZXNzKClcbmltcG9ydCB7IHVuaXF1ZUlkLCB1cGxvYWRGaWxlLCBmaWxlRXh0LCBwdXNoMlJEUyB9IGZyb20gJy4vc3JjL2hlbHBlcnMuanMnXG52YXIgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcbmNvbnN0IFBPUlQgPSA4MDgwXG5cbmltcG9ydCB3aW5zdG9uIGZyb20gJ3dpbnN0b24nXG5pbXBvcnQgbmV3cmVsaWNGb3JtYXR0ZXIgZnJvbSAnQG5ld3JlbGljL3dpbnN0b24tZW5yaWNoZXInXG5cbmNvbnN0IGxvZ2dlciA9IHdpbnN0b24uY3JlYXRlTG9nZ2VyKHtcbiAgICBsZXZlbDogJ2luZm8nLFxuICAgIGV4aXRPbkVycm9yOiBmYWxzZSxcbiAgICB0cmFuc3BvcnRzOiBbXG4gICAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgICAgICBoYW5kbGVFeGNlcHRpb25zOiB0cnVlLFxuICAgICAgICBoYW5kbGVSZWplY3Rpb25zOiB0cnVlXG4gICAgICB9KVxuICAgIF0sXG4gICAgZm9ybWF0OiB3aW5zdG9uLmZvcm1hdC5jb21iaW5lKFxuICAgICAgICB3aW5zdG9uLmZvcm1hdCgoaW5mbywgb3B0cykgPT4gT2JqZWN0LmFzc2lnbihpbmZvLCB7bW9kdWxlOiBfX2ZpbGVuYW1lfSkpKCksXG4gICAgICAgIG5ld3JlbGljRm9ybWF0dGVyKCksXG4gICAgICAgIHdpbnN0b24uZm9ybWF0Lmpzb24oKVxuICAgIClcbiAgfSk7XG5cbi8vIGZvciB0ZXN0aW5nIGxvY2FsbHk6IG5vZGUgLXIgZG90ZW52L2NvbmZpZyBpbmRleC5qcyAgXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yODMwNTEyMC9kaWZmZXJlbmNlcy1iZXR3ZWVuLWV4cHJlc3Mtcm91dGVyLWFuZC1hcHAtZ2V0XG5cblxuYXBwLnVzZSgnLycsIHJvdXRlcilcblxuYXBwLmxpc3RlbihQT1JULCAoKSA9PiB7XG4gICAgbG9nZ2VyLmluZm8oYFVwbG9hZCBTZXJ2aWNlIHN0YXJ0ZWQgb24gcG9ydCAke1BPUlR9YClcbn0pXG5cbnJvdXRlci5wb3N0KCcvdXBsb2FkJywgdXBsb2FkLmFueSgpLCBhc3luYyhyZXEsIHJlcykgPT4ge1xuICAgIGxvZ2dlci5pbmZvKFwiU3RhcnRpbmcgdXBsb2FkXCIpXG4gICAgbGV0IGltYWdlID0gcmVxLmZpbGVzWzBdLmJ1ZmZlclxuICAgIGxldCBuYW1lID0gcmVxLmJvZHkubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCBmaWxlTmFtZSA9IHVuaXF1ZUlkKClcbiAgICAvLyBwYXJzZSBmcm9tIGJvZHlcbiAgICBsb2dnZXIuaW5mbyhmaWxlTmFtZSwgbmFtZSwgaW1hZ2UpXG5cbiAgICAvLyBkZXRlcm1pbmUgZmlsZSBleHRlbnNpb25cbiAgICBsZXQgZXh0ID0gZmlsZUV4dChyZXEuYm9keS5taW1lVHlwZSlcblxuICAgIC8vIGJhc2U2NCBpbWFnZSB0byBiaW5hcnkgZGF0YVxuICAgIGxldCBpbWFnZURhdGEgPSBCdWZmZXIuZnJvbShpbWFnZSwgJ2Jhc2U2NCcpXG5cbiAgICAvLyB1cGxvYWQgdG8gczNcbiAgICBsZXQgbGluayA9IGF3YWl0IHVwbG9hZEZpbGUoZmlsZU5hbWUgKyBleHQsIGltYWdlRGF0YSlcblxuICAgIC8vIHB1c2ggdG8gcmRzXG4gICAgbGV0IGRhdGEgPSBhd2FpdCBwdXNoMlJEUyhmaWxlTmFtZSwgZXh0LCBuYW1lLCBsaW5rKVxuICAgIHJlcy5zZW5kKGRhdGEpIFxuICB9KTsiXX0=