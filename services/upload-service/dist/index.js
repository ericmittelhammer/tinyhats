"use strict";

var _express = require("express");

var _expressAsyncErrors = require("express-async-errors");

var _multer = require("multer");

var _helpers = require("./src/helpers.js");

var _winston = require("winston");

var _winstonEnricher = require("@newrelic/winston-enricher");

require('newrelic');

const upload = _multer();

const app = _express();

var router = _express.Router();

const PORT = 8080;

const logger = _winston.createLogger({
  level: 'info',
  transports: [new _winston.transports.Console()],
  format: _winston.format.combine(_winston.format((info, opts) => Object.assign(info, {
    module: __filename
  }))(), _winstonEnricher(), _winston.format.errors({
    stack: true
  }), _winston.format.json())
}); // for testing locally: node -r dotenv/config index.js  
// https://stackoverflow.com/questions/28305120/differences-between-express-router-and-app-get


app.use('/', router);
app.listen(PORT, () => {
  logger.info(`Upload Service started on port ${PORT}`);
});
router.post('/upload', upload.any(), async (req, res) => {
  logger.info("Starting upload");
  let image = req.files[0].buffer;
  let name = req.body.name.toLowerCase();
  let fileName = (0, _helpers.uniqueId)(); // parse from body

  logger.info(fileName, name, image); // determine file extension

  let ext = (0, _helpers.fileExt)(req.body.mimeType); // base64 image to binary data

  let imageData = Buffer.from(image, 'base64'); // upload to s3

  let link = await (0, _helpers.uploadFile)(fileName + ext, imageData); // push to rds

  let data = await (0, _helpers.push2RDS)(fileName, ext, name, link);
  res.send(data);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJ1cGxvYWQiLCJtdWx0ZXIiLCJhcHAiLCJleHByZXNzIiwicm91dGVyIiwiUm91dGVyIiwiUE9SVCIsImxvZ2dlciIsIndpbnN0b24iLCJjcmVhdGVMb2dnZXIiLCJsZXZlbCIsInRyYW5zcG9ydHMiLCJDb25zb2xlIiwiZm9ybWF0IiwiY29tYmluZSIsImluZm8iLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwibW9kdWxlIiwiX19maWxlbmFtZSIsIm5ld3JlbGljRm9ybWF0dGVyIiwiZXJyb3JzIiwic3RhY2siLCJqc29uIiwidXNlIiwibGlzdGVuIiwicG9zdCIsImFueSIsInJlcSIsInJlcyIsImltYWdlIiwiZmlsZXMiLCJidWZmZXIiLCJuYW1lIiwiYm9keSIsInRvTG93ZXJDYXNlIiwiZmlsZU5hbWUiLCJleHQiLCJtaW1lVHlwZSIsImltYWdlRGF0YSIsIkJ1ZmZlciIsImZyb20iLCJsaW5rIiwiZGF0YSIsInNlbmQiXSwibWFwcGluZ3MiOiI7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBSUE7O0FBQ0E7O0FBWEFBLE9BQU8sQ0FBQyxVQUFELENBQVA7O0FBSUEsTUFBTUMsTUFBTSxHQUFHQyxPQUFNLEVBQXJCOztBQUNBLE1BQU1DLEdBQUcsR0FBR0MsUUFBTyxFQUFuQjs7QUFFQSxJQUFJQyxNQUFNLEdBQUdELFFBQU8sQ0FBQ0UsTUFBUixFQUFiOztBQUNBLE1BQU1DLElBQUksR0FBRyxJQUFiOztBQUtBLE1BQU1DLE1BQU0sR0FBR0MsUUFBTyxDQUFDQyxZQUFSLENBQXFCO0FBQ2hDQyxFQUFBQSxLQUFLLEVBQUUsTUFEeUI7QUFFaENDLEVBQUFBLFVBQVUsRUFBRSxDQUNWLElBQUlILFFBQU8sQ0FBQ0csVUFBUixDQUFtQkMsT0FBdkIsRUFEVSxDQUZvQjtBQUtoQ0MsRUFBQUEsTUFBTSxFQUFFTCxRQUFPLENBQUNLLE1BQVIsQ0FBZUMsT0FBZixDQUNKTixRQUFPLENBQUNLLE1BQVIsQ0FBZSxDQUFDRSxJQUFELEVBQU9DLElBQVAsS0FBZ0JDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxJQUFkLEVBQW9CO0FBQUNJLElBQUFBLE1BQU0sRUFBRUM7QUFBVCxHQUFwQixDQUEvQixHQURJLEVBRUpDLGdCQUFpQixFQUZiLEVBR0piLFFBQU8sQ0FBQ0ssTUFBUixDQUFlUyxNQUFmLENBQXNCO0FBQUNDLElBQUFBLEtBQUssRUFBRTtBQUFSLEdBQXRCLENBSEksRUFJSmYsUUFBTyxDQUFDSyxNQUFSLENBQWVXLElBQWYsRUFKSTtBQUx3QixDQUFyQixDQUFmLEMsQ0FhQTtBQUNBOzs7QUFHQXRCLEdBQUcsQ0FBQ3VCLEdBQUosQ0FBUSxHQUFSLEVBQWFyQixNQUFiO0FBRUFGLEdBQUcsQ0FBQ3dCLE1BQUosQ0FBV3BCLElBQVgsRUFBaUIsTUFBTTtBQUNuQkMsRUFBQUEsTUFBTSxDQUFDUSxJQUFQLENBQWEsa0NBQWlDVCxJQUFLLEVBQW5EO0FBQ0gsQ0FGRDtBQUlBRixNQUFNLENBQUN1QixJQUFQLENBQVksU0FBWixFQUF1QjNCLE1BQU0sQ0FBQzRCLEdBQVAsRUFBdkIsRUFBcUMsT0FBTUMsR0FBTixFQUFXQyxHQUFYLEtBQW1CO0FBQ3BEdkIsRUFBQUEsTUFBTSxDQUFDUSxJQUFQLENBQVksaUJBQVo7QUFDQSxNQUFJZ0IsS0FBSyxHQUFHRixHQUFHLENBQUNHLEtBQUosQ0FBVSxDQUFWLEVBQWFDLE1BQXpCO0FBQ0EsTUFBSUMsSUFBSSxHQUFHTCxHQUFHLENBQUNNLElBQUosQ0FBU0QsSUFBVCxDQUFjRSxXQUFkLEVBQVg7QUFDQSxNQUFJQyxRQUFRLEdBQUcsd0JBQWYsQ0FKb0QsQ0FLcEQ7O0FBQ0E5QixFQUFBQSxNQUFNLENBQUNRLElBQVAsQ0FBWXNCLFFBQVosRUFBc0JILElBQXRCLEVBQTRCSCxLQUE1QixFQU5vRCxDQVFwRDs7QUFDQSxNQUFJTyxHQUFHLEdBQUcsc0JBQVFULEdBQUcsQ0FBQ00sSUFBSixDQUFTSSxRQUFqQixDQUFWLENBVG9ELENBV3BEOztBQUNBLE1BQUlDLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlYLEtBQVosRUFBbUIsUUFBbkIsQ0FBaEIsQ0Fab0QsQ0FjcEQ7O0FBQ0EsTUFBSVksSUFBSSxHQUFHLE1BQU0seUJBQVdOLFFBQVEsR0FBR0MsR0FBdEIsRUFBMkJFLFNBQTNCLENBQWpCLENBZm9ELENBaUJwRDs7QUFDQSxNQUFJSSxJQUFJLEdBQUcsTUFBTSx1QkFBU1AsUUFBVCxFQUFtQkMsR0FBbkIsRUFBd0JKLElBQXhCLEVBQThCUyxJQUE5QixDQUFqQjtBQUNBYixFQUFBQSxHQUFHLENBQUNlLElBQUosQ0FBU0QsSUFBVDtBQUNELENBcEJIIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnbmV3cmVsaWMnKTtcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgZXhwcmVzc0FzeW5jRXJyb3JzIGZyb20gJ2V4cHJlc3MtYXN5bmMtZXJyb3JzJ1xuaW1wb3J0IG11bHRlciBmcm9tICdtdWx0ZXInXG5jb25zdCB1cGxvYWQgPSBtdWx0ZXIoKVxuY29uc3QgYXBwID0gZXhwcmVzcygpXG5pbXBvcnQgeyB1bmlxdWVJZCwgdXBsb2FkRmlsZSwgZmlsZUV4dCwgcHVzaDJSRFMgfSBmcm9tICcuL3NyYy9oZWxwZXJzLmpzJ1xudmFyIHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5jb25zdCBQT1JUID0gODA4MFxuXG5pbXBvcnQgd2luc3RvbiBmcm9tICd3aW5zdG9uJ1xuaW1wb3J0IG5ld3JlbGljRm9ybWF0dGVyIGZyb20gJ0BuZXdyZWxpYy93aW5zdG9uLWVucmljaGVyJ1xuXG5jb25zdCBsb2dnZXIgPSB3aW5zdG9uLmNyZWF0ZUxvZ2dlcih7XG4gICAgbGV2ZWw6ICdpbmZvJyxcbiAgICB0cmFuc3BvcnRzOiBbXG4gICAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoKVxuICAgIF0sXG4gICAgZm9ybWF0OiB3aW5zdG9uLmZvcm1hdC5jb21iaW5lKFxuICAgICAgICB3aW5zdG9uLmZvcm1hdCgoaW5mbywgb3B0cykgPT4gT2JqZWN0LmFzc2lnbihpbmZvLCB7bW9kdWxlOiBfX2ZpbGVuYW1lfSkpKCksXG4gICAgICAgIG5ld3JlbGljRm9ybWF0dGVyKCksXG4gICAgICAgIHdpbnN0b24uZm9ybWF0LmVycm9ycyh7c3RhY2s6IHRydWV9KSxcbiAgICAgICAgd2luc3Rvbi5mb3JtYXQuanNvbigpXG4gICAgKVxuICB9KTtcblxuLy8gZm9yIHRlc3RpbmcgbG9jYWxseTogbm9kZSAtciBkb3RlbnYvY29uZmlnIGluZGV4LmpzICBcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI4MzA1MTIwL2RpZmZlcmVuY2VzLWJldHdlZW4tZXhwcmVzcy1yb3V0ZXItYW5kLWFwcC1nZXRcblxuXG5hcHAudXNlKCcvJywgcm91dGVyKVxuXG5hcHAubGlzdGVuKFBPUlQsICgpID0+IHtcbiAgICBsb2dnZXIuaW5mbyhgVXBsb2FkIFNlcnZpY2Ugc3RhcnRlZCBvbiBwb3J0ICR7UE9SVH1gKVxufSlcblxucm91dGVyLnBvc3QoJy91cGxvYWQnLCB1cGxvYWQuYW55KCksIGFzeW5jKHJlcSwgcmVzKSA9PiB7XG4gICAgbG9nZ2VyLmluZm8oXCJTdGFydGluZyB1cGxvYWRcIilcbiAgICBsZXQgaW1hZ2UgPSByZXEuZmlsZXNbMF0uYnVmZmVyXG4gICAgbGV0IG5hbWUgPSByZXEuYm9keS5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGZpbGVOYW1lID0gdW5pcXVlSWQoKVxuICAgIC8vIHBhcnNlIGZyb20gYm9keVxuICAgIGxvZ2dlci5pbmZvKGZpbGVOYW1lLCBuYW1lLCBpbWFnZSlcblxuICAgIC8vIGRldGVybWluZSBmaWxlIGV4dGVuc2lvblxuICAgIGxldCBleHQgPSBmaWxlRXh0KHJlcS5ib2R5Lm1pbWVUeXBlKVxuXG4gICAgLy8gYmFzZTY0IGltYWdlIHRvIGJpbmFyeSBkYXRhXG4gICAgbGV0IGltYWdlRGF0YSA9IEJ1ZmZlci5mcm9tKGltYWdlLCAnYmFzZTY0JylcblxuICAgIC8vIHVwbG9hZCB0byBzM1xuICAgIGxldCBsaW5rID0gYXdhaXQgdXBsb2FkRmlsZShmaWxlTmFtZSArIGV4dCwgaW1hZ2VEYXRhKVxuXG4gICAgLy8gcHVzaCB0byByZHNcbiAgICBsZXQgZGF0YSA9IGF3YWl0IHB1c2gyUkRTKGZpbGVOYW1lLCBleHQsIG5hbWUsIGxpbmspXG4gICAgcmVzLnNlbmQoZGF0YSkgXG4gIH0pOyJdfQ==